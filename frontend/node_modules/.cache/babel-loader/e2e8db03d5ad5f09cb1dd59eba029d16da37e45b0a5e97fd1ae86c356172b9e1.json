{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const registerUser = async userData => {\n  const response = await fetch('/api/auth/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n  const data = await response.json();\n  localStorage.setItem('token', data.token); // Сохранение токена\n  return data;\n};\n\n//Авторизация\nexport const loginUser = async userData => {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  const data = await response.json();\n  localStorage.setItem('token', data.token); // Сохранение токена\n  return data;\n};\n\n// Получение всех списков покупок пользователя\nexport const fetchShoppingLists = async () => {\n  const token = localStorage.getItem('token');\n  const response = await axios.get(`${BASE_URL}/shopping-lists`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Создание нового списка покупок\nexport const createShoppingList = async name => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/shopping-lists`, {\n    name\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Обновление названия списка покупков\nexport const updateShoppingListName = async (listId, newName) => {\n  const response = await fetch(`/api/shopping-lists/${listId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify({\n      name: newName\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update the shopping list name');\n  }\n  return await response.json();\n};\n\n// Архивирование списка покупок\nexport const archiveShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}/archive`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n//Разархивировать список \nexport const unarchiveShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}/unarchive`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удаление списка покупок\nexport const deleteShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  if (!listId) {\n    throw new Error('List ID is required to delete a shopping list.');\n  }\n  try {\n    const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error in deleteShoppingList:', error);\n    throw error;\n  }\n};\n\n// Добавление участника (по email) в список покупок\nexport const addParticipantByEmail = async (listId, email) => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await axios.post(`${BASE_URL}/shopping-lists/${listId}/participants`, {\n      email\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error in addParticipantByEmail:', error);\n    throw error;\n  }\n};\n\n// Добавление нового предмета в список\nexport const addItemToList = async (listId, itemName) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/shopping-lists/${listId}/items`, {\n    name: itemName\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Переключить статус предмета\nexport const toggleItemStatus = async (listId, itemId) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}/items/${itemId}/toggle`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удалить предмет\nexport const deleteItem = async (listId, itemId) => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}/items/${itemId}`,\n    // Убедитесь, что маршрут совпадает с серверным\n    {\n      headers: {\n        Authorization: `Bearer ${token}`\n      } // Передача токена авторизации\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting item:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","loginUser","fetchShoppingLists","getItem","get","Authorization","createShoppingList","name","post","updateShoppingListName","listId","newName","archiveShoppingList","put","unarchiveShoppingList","deleteShoppingList","delete","error","console","addParticipantByEmail","email","addItemToList","itemName","toggleItemStatus","itemId","deleteItem"],"sources":["C:/Users/ab214/OneDrive/Рабочий стол/shopppinglist/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const registerUser = async (userData) => {\r\n  const response = await fetch('/api/auth/register', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n      throw new Error('Registration failed');\r\n  }\r\n\r\n  const data = await response.json();\r\n  localStorage.setItem('token', data.token); // Сохранение токена\r\n  return data;\r\n};\r\n\r\n//Авторизация\r\nexport const loginUser = async (userData) => {\r\n  const response = await fetch('/api/auth/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n      throw new Error('Login failed');\r\n  }\r\n\r\n  const data = await response.json();\r\n  localStorage.setItem('token', data.token); // Сохранение токена\r\n  return data;\r\n};\r\n\r\n\r\n// Получение всех списков покупок пользователя\r\nexport const fetchShoppingLists = async () => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.get(`${BASE_URL}/shopping-lists`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Создание нового списка покупок\r\nexport const createShoppingList = async (name) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/shopping-lists`,\r\n    { name },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Обновление названия списка покупков\r\nexport const updateShoppingListName = async (listId, newName) => {\r\n  const response = await fetch(`/api/shopping-lists/${listId}`, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n    },\r\n    body: JSON.stringify({ name: newName }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to update the shopping list name');\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\n\r\n// Архивирование списка покупок\r\nexport const archiveShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}/archive`,\r\n    {},\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n//Разархивировать список \r\nexport const unarchiveShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}/unarchive`,\r\n    {},\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Удаление списка покупок\r\nexport const deleteShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  if (!listId) {\r\n    throw new Error('List ID is required to delete a shopping list.');\r\n  }\r\n  try {\r\n    const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in deleteShoppingList:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Добавление участника (по email) в список покупок\r\nexport const addParticipantByEmail = async (listId, email) => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    const response = await axios.post(\r\n      `${BASE_URL}/shopping-lists/${listId}/participants`,\r\n      { email },\r\n      {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in addParticipantByEmail:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Добавление нового предмета в список\r\nexport const addItemToList = async (listId, itemName) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/shopping-lists/${listId}/items`,\r\n    { name: itemName },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Переключить статус предмета\r\nexport const toggleItemStatus = async (listId, itemId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}/items/${itemId}/toggle`,\r\n    {},\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Удалить предмет\r\nexport const deleteItem = async (listId, itemId) => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    const response = await axios.delete(\r\n      `${BASE_URL}/shopping-lists/${listId}/items/${itemId}`, // Убедитесь, что маршрут совпадает с серверным\r\n      {\r\n        headers: { Authorization: `Bearer ${token}` }, // Передача токена авторизации\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting item:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}