{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Регистрация пользователя\nexport const registerUser = async userData => {\n  const response = await axios.post(`${BASE_URL}/auth/register`, userData);\n  return response.data;\n};\n\n// Аутентификация пользователя\nexport const loginUser = async credentials => {\n  const response = await axios.post(`${BASE_URL}/auth/login`, credentials);\n  return response.data;\n};\n\n// Получение списка покупок\nexport const fetchShoppingLists = async () => {\n  const token = localStorage.getItem('token');\n  const response = await axios.get(`${BASE_URL}/shopping-lists`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Создание нового списка покупок\nexport const createShoppingList = async name => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/shopping-lists`, {\n    name\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удаление списка покупок\nexport const deleteShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Архивирование списка покупок\nexport const archiveShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}`, {\n    isArchived: true\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Добавление участника в список\nexport const addParticipant = async (listId, name) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/participants`, {\n    listId,\n    name\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удаление участника из списка\nexport const removeParticipant = async (listId, participantId) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.delete(`${BASE_URL}/participants/${participantId}`, {\n    data: {\n      listId\n    },\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Добавление нового элемента в список\nexport const addItemToList = async (listId, itemName) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/shopping-lists/${listId}/items`, {\n    name: itemName\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удаление элемента из списка\nexport const deleteItemFromList = async (listId, itemId) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}/items/${itemId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","post","data","loginUser","credentials","fetchShoppingLists","token","localStorage","getItem","get","headers","Authorization","createShoppingList","name","deleteShoppingList","listId","delete","archiveShoppingList","put","isArchived","addParticipant","removeParticipant","participantId","addItemToList","itemName","deleteItemFromList","itemId"],"sources":["C:/Users/ab214/OneDrive/Рабочий стол/shopppinglist/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Регистрация пользователя\r\nexport const registerUser = async (userData) => {\r\n  const response = await axios.post(`${BASE_URL}/auth/register`, userData);\r\n  return response.data;\r\n};\r\n\r\n// Аутентификация пользователя\r\nexport const loginUser = async (credentials) => {\r\n  const response = await axios.post(`${BASE_URL}/auth/login`, credentials);\r\n  return response.data;\r\n};\r\n\r\n// Получение списка покупок\r\nexport const fetchShoppingLists = async () => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.get(`${BASE_URL}/shopping-lists`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Создание нового списка покупок\r\nexport const createShoppingList = async (name) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/shopping-lists`,\r\n    { name },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n\r\n\r\n// Удаление списка покупок\r\nexport const deleteShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Архивирование списка покупок\r\nexport const archiveShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}`,\r\n    { isArchived: true },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Добавление участника в список\r\nexport const addParticipant = async (listId, name) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/participants`,\r\n    { listId, name },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n\r\n// Удаление участника из списка\r\nexport const removeParticipant = async (listId, participantId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.delete(\r\n    `${BASE_URL}/participants/${participantId}`,\r\n    {\r\n      data: { listId },\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n\r\n// Добавление нового элемента в список\r\nexport const addItemToList = async (listId, itemName) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/shopping-lists/${listId}/items`,\r\n    { name: itemName },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Удаление элемента из списка\r\nexport const deleteItemFromList = async (listId, itemId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}/items/${itemId}`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}