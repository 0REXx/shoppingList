{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const registerUser = async userData => {\n  const response = await fetch('/api/auth/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n  const data = await response.json();\n  localStorage.setItem('token', data.token); // Сохранение токена\n  return data;\n};\n\n//Авторизация\nexport const loginUser = async userData => {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  const data = await response.json();\n  localStorage.setItem('token', data.token); // Сохранение токена\n  return data;\n};\n\n// Получение всех списков покупок пользователя\nexport const fetchShoppingLists = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('User is not authenticated');\n  }\n  try {\n    const response = await axios.get(`${BASE_URL}/shopping-lists`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      localStorage.removeItem('token'); // Удаляем токен\n      window.location.href = '/login'; // Перенаправляем на страницу входа\n    }\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Failed to fetch shopping lists'\n    };\n  }\n};\n\n// Создание нового списка покупок\nexport const createShoppingList = async name => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/shopping-lists`, {\n    name\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Обновление названия списка покупков\nexport const updateShoppingListName = async (listId, newName) => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}`, {\n      name: newName\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error('Error updating list name:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: 'Failed to update list name'\n    };\n  }\n};\n\n// Архивирование списка покупок\nexport const archiveShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}/archive`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n//Разархивировать список \nexport const unarchiveShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}/unarchive`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удаление списка покупок\nexport const deleteShoppingList = async listId => {\n  const token = localStorage.getItem('token');\n  if (!listId) {\n    throw new Error('List ID is required to delete a shopping list.');\n  }\n  try {\n    const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error in deleteShoppingList:', error);\n    throw error;\n  }\n};\n\n// Добавление участника (по email) в список покупок\nexport const addParticipantByEmail = async (listId, email) => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await axios.post(`${BASE_URL}/shopping-lists/${listId}/participants`, {\n      email\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error in addParticipantByEmail:', error);\n    throw error;\n  }\n};\n\n// Добавление нового предмета в список\nexport const addItemToList = async (listId, itemName) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.post(`${BASE_URL}/shopping-lists/${listId}/items`, {\n    name: itemName\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Переключить статус предмета\nexport const toggleItemStatus = async (listId, itemId) => {\n  const token = localStorage.getItem('token');\n  const response = await axios.put(`${BASE_URL}/shopping-lists/${listId}/items/${itemId}/toggle`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Удалить предмет\nexport const deleteItem = async (listId, itemId) => {\n  const token = localStorage.getItem('token');\n  try {\n    const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}/items/${itemId}`,\n    // Убедитесь, что маршрут совпадает с серверным\n    {\n      headers: {\n        Authorization: `Bearer ${token}`\n      } // Передача токена авторизации\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting item:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","loginUser","fetchShoppingLists","getItem","get","Authorization","error","_error$response","_error$response2","status","removeItem","window","location","href","message","createShoppingList","name","post","updateShoppingListName","listId","newName","put","_error$response3","_error$response4","console","archiveShoppingList","unarchiveShoppingList","deleteShoppingList","delete","addParticipantByEmail","email","addItemToList","itemName","toggleItemStatus","itemId","deleteItem"],"sources":["C:/Users/ab214/OneDrive/Рабочий стол/shopppinglist/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const registerUser = async (userData) => {\r\n  const response = await fetch('/api/auth/register', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n      throw new Error('Registration failed');\r\n  }\r\n\r\n  const data = await response.json();\r\n  localStorage.setItem('token', data.token); // Сохранение токена\r\n  return data;\r\n};\r\n\r\n//Авторизация\r\nexport const loginUser = async (userData) => {\r\n  const response = await fetch('/api/auth/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n      throw new Error('Login failed');\r\n  }\r\n\r\n  const data = await response.json();\r\n  localStorage.setItem('token', data.token); // Сохранение токена\r\n  return data;\r\n};\r\n\r\n\r\n// Получение всех списков покупок пользователя\r\nexport const fetchShoppingLists = async () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error('User is not authenticated');\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/shopping-lists`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token'); // Удаляем токен\r\n      window.location.href = '/login'; // Перенаправляем на страницу входа\r\n    }\r\n    throw error.response?.data || { message: 'Failed to fetch shopping lists' };\r\n  }\r\n};\r\n\r\n\r\n// Создание нового списка покупок\r\nexport const createShoppingList = async (name) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/shopping-lists`,\r\n    { name },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Обновление названия списка покупков\r\nexport const updateShoppingListName = async (listId, newName) => {\r\n  const token = localStorage.getItem('token');\r\n\r\n  try {\r\n    const response = await axios.put(\r\n      `${BASE_URL}/shopping-lists/${listId}`,\r\n      { name: newName },\r\n      {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      }\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating list name:', error.response?.data || error.message);\r\n    throw error.response?.data || { message: 'Failed to update list name' };\r\n  }\r\n};\r\n\r\n\r\n\r\n// Архивирование списка покупок\r\nexport const archiveShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}/archive`,\r\n    {},\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n//Разархивировать список \r\nexport const unarchiveShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}/unarchive`,\r\n    {},\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Удаление списка покупок\r\nexport const deleteShoppingList = async (listId) => {\r\n  const token = localStorage.getItem('token');\r\n  if (!listId) {\r\n    throw new Error('List ID is required to delete a shopping list.');\r\n  }\r\n  try {\r\n    const response = await axios.delete(`${BASE_URL}/shopping-lists/${listId}`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in deleteShoppingList:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Добавление участника (по email) в список покупок\r\nexport const addParticipantByEmail = async (listId, email) => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    const response = await axios.post(\r\n      `${BASE_URL}/shopping-lists/${listId}/participants`,\r\n      { email },\r\n      {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in addParticipantByEmail:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Добавление нового предмета в список\r\nexport const addItemToList = async (listId, itemName) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.post(\r\n    `${BASE_URL}/shopping-lists/${listId}/items`,\r\n    { name: itemName },\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Переключить статус предмета\r\nexport const toggleItemStatus = async (listId, itemId) => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await axios.put(\r\n    `${BASE_URL}/shopping-lists/${listId}/items/${itemId}/toggle`,\r\n    {},\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Удалить предмет\r\nexport const deleteItem = async (listId, itemId) => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    const response = await axios.delete(\r\n      `${BASE_URL}/shopping-lists/${listId}/items/${itemId}`, // Убедитесь, что маршрут совпадает с серверным\r\n      {\r\n        headers: { Authorization: `Bearer ${token}` }, // Передача токена авторизации\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting item:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}